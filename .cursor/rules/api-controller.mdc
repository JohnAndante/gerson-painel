---
description: Regras para cria√ß√£o e estrutura√ß√£o de controllers de API no frontend
alwaysApply: false
---
# üöÄ Regras para Controllers de API

## üìã Estrutura Padr√£o

Todos os controllers de API devem seguir EXATAMENTE esta estrutura, baseada nos padr√µes estabelecidos em `agentApi.ts` e `authApi.ts`:

### 1. **Imports Padr√£o**

```typescript
import { AxiosInstance, AxiosError } from 'axios';
import { [Type]Request, [Type]Response, [Type]Details, [Type]ListParams, [Type]ListResponse } from '../types/[type]';
import { ApiResponse } from '../types/auth';
import { createApiInstance, handleAxiosResponse, handleAxiosError } from './baseApi';
```

### 2. **Organiza√ß√£o das Se√ß√µes**

```typescript
// ===========================
// [Type] API Class
// ===========================

class [Type]Api {
    // ... implementa√ß√£o
}

// ===========================
// Inst√¢ncia e Exports
// ===========================

export const [type]Api = new [Type]Api();
```

### 3. **Classe do Controller**

- ‚úÖ **SEMPRE** usar `class` (n√£o `export class`)
- ‚úÖ **SEMPRE** ter `private axiosInstance: AxiosInstance`
- ‚úÖ **SEMPRE** usar `createApiInstance()` no construtor
- ‚úÖ **SEMPRE** usar `handleAxiosResponse()` e `handleAxiosError()`

### 4. **M√©todos da API**

```typescript
/**
 * [Descri√ß√£o do que faz]
 */
async [methodName](params: [Type]Request): Promise<ApiResponse<[Type]Response>> {
    try {
        const response = await this.axiosInstance.[httpMethod]<[Type]Response>(
            '/[endpoint]',
            [data/params]
        );
        return handleAxiosResponse(response);
    } catch (error) {
        return handleAxiosError(error as AxiosError);
    }
}
```

### 5. **Exports no index.ts**

```typescript
// [Type] Controller
export { [type]Api } from './[type]Api';
```

## üéØ **REGRAS PARA TIPAGENS (@types/)**

### **1. Estrutura de Arquivo de Tipos**

```typescript
// ===========================
// [Type] API Types
// ===========================

/**
 * [Descri√ß√£o do tipo/enum]
 */
export type [Type]Status = 'active' | 'inactive' | 'pending';

/**
 * [Descri√ß√£o da interface]
 */
export interface [Type]Request {
    /** [Descri√ß√£o do campo] */
    field: string;
    /** [Descri√ß√£o do campo opcional] */
    optional_field?: string;
}

/**
 * [Descri√ß√£o da interface de resposta]
 */
export interface [Type]Response {
    /** [Descri√ß√£o do campo] */
    id: string;
    /** [Descri√ß√£o do campo] */
    name: string;
    /** [Descri√ß√£o do campo] */
    created_at: string;
}

/**
 * [Descri√ß√£o da interface completa]
 */
export interface [Type]Details extends [Type]Response {
    /** [Descri√ß√£o do campo adicional] */
    additional_field: string;
}

/**
 * [Descri√ß√£o dos filtros]
 */
export interface [Type]Filters {
    /** [Descri√ß√£o do filtro] */
    status?: [Type]Status;
    /** [Descri√ß√£o do filtro] */
    company_id?: string;
}

/**
 * [Descri√ß√£o dos par√¢metros de listagem]
 */
export interface [Type]ListParams {
    /** [Descri√ß√£o do par√¢metro] */
    page?: number;
    /** [Descri√ß√£o do par√¢metro] */
    limit?: number;
    /** [Descri√ß√£o do par√¢metro] */
    filters?: [Type]Filters;
}

/**
 * [Descri√ß√£o da resposta de listagem]
 */
export interface [Type]ListResponse {
    /** [Descri√ß√£o do campo] */
    data: [Type]Details[];
    /** [Descri√ß√£o do campo] */
    total: number;
    /** [Descri√ß√£o do campo] */
    page: number;
    /** [Descri√ß√£o do campo] */
    limit: number;
}
```

### **2. Conven√ß√µes de Nomenclatura**

- ‚úÖ **SEMPRE** usar `[Type]Request` para dados de entrada
- ‚úÖ **SEMPRE** usar `[Type]Response` para respostas b√°sicas
- ‚úÖ **SEMPRE** usar `[Type]Details` para dados completos
- ‚úÖ **SEMPRE** usar `[Type]Filters` para filtros de busca
- ‚úÖ **SEMPRE** usar `[Type]ListParams` para par√¢metros de listagem
- ‚úÖ **SEMPRE** usar `[Type]ListResponse` para respostas de listagem

### **3. Documenta√ß√£o de Tipos**

- ‚úÖ **SEMPRE** usar JSDoc para interfaces principais
- ‚úÖ **SEMPRE** documentar campos obrigat√≥rios vs opcionais
- ‚úÖ **SEMPRE** usar coment√°rios `/** */` para campos importantes
- ‚úÖ **SEMPRE** explicar o prop√≥sito de cada interface

### **4. Tipos Compartilhados**

- ‚úÖ **SEMPRE** usar `ApiResponse<T>` do `auth.ts` para respostas de API
- ‚úÖ **SEMPRE** usar tipos base como `string`, `number`, `boolean`
- ‚úÖ **SEMPRE** usar union types para status/enums (`'active' | 'inactive'`)
- ‚úÖ **SEMPRE** usar `extends` para heran√ßa de tipos

## üö´ **NUNCA FAZER**

- ‚ùå N√£o usar `export class` - sempre `class` + export da inst√¢ncia
- ‚ùå N√£o criar configura√ß√µes customizadas de Axios
- ‚ùå N√£o implementar interceptors customizados
- ‚ùå N√£o criar fun√ß√µes de conveni√™ncia separadas
- ‚ùå N√£o usar `ApiConfig` ou configura√ß√µes complexas
- ‚ùå N√£o implementar m√©todos que n√£o existem no backend
- ‚ùå N√£o criar tipos sem documenta√ß√£o JSDoc
- ‚ùå N√£o usar nomes gen√©ricos como `Data`, `Info`, `Object`
- ‚ùå N√£o criar interfaces sem campos obrigat√≥rios definidos

## ‚úÖ **SEMPRE FAZER**

- ‚úÖ Usar `createApiInstance()` do baseApi
- ‚úÖ Usar `handleAxiosResponse()` e `handleAxiosError()`
- ‚úÖ Seguir exatamente a estrutura de se√ß√µes com `// ===========================`
- ‚úÖ Usar `ApiResponse<T>` para tipagem de retorno
- ‚úÖ Implementar apenas endpoints que existem no backend
- ‚úÖ Usar nomes de m√©todos descritivos e claros
- ‚úÖ Documentar todos os tipos com JSDoc
- ‚úÖ Seguir conven√ß√µes de nomenclatura padronizadas
- ‚úÖ Usar tipos espec√≠ficos e descritivos

## üîß **Exemplo de Implementa√ß√£o**

```typescript
// ===========================
// User API Class
// ===========================

class UserApi {
  private axiosInstance: AxiosInstance;

  constructor() {
    this.axiosInstance = createApiInstance();
  }

  async createUser(userData: CreateUserRequest): Promise<ApiResponse<CreateUserResponse>> {
    try {
      const response = await this.axiosInstance.post<CreateUserResponse>('/user/create', userData);
      return handleAxiosResponse(response);
    } catch (error) {
      return handleAxiosError(error as AxiosError);
    }
  }
}

// ===========================
// Inst√¢ncia e Exports
// ===========================

export const userApi = new UserApi();
```

## üìù **Checklist de Valida√ß√£o**

Antes de considerar um controller completo, verificar se:

- [ ] Segue exatamente a estrutura de se√ß√µes
- [ ] Usa `class` (n√£o `export class`)
- [ ] Usa `createApiInstance()` no construtor
- [ ] Usa `handleAxiosResponse()` e `handleAxiosError()`
- [ ] Exporta apenas a inst√¢ncia (`export const [type]Api`)
- [ ] Est√° registrado no `index.ts`
- [ ] Endpoints correspondem ao backend
- [ ] Tipagem usa `ApiResponse<T>`
- [ ] Tipos est√£o documentados com JSDoc
- [ ] Conven√ß√µes de nomenclatura seguidas
- [ ] Interfaces seguem padr√£o Request/Response/Details/Filters

## üéØ **Objetivo**

Manter **consist√™ncia absoluta** entre todos os controllers e tipos, facilitando manuten√ß√£o, debugging e onboarding de novos desenvolvedores.
